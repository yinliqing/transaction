<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:util="http://www.springframework.org/schema/util"  
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:context="http://www.springframework.org/schema/context" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"
       default-lazy-init="true">
       
  <!-- MVC -->
	<!-- AOP动态代理  true 表示使用Cglib动态代理，是否需要引入Cglib的jar包-->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<context:annotation-config>
	   <context:component-scan base-package="com.ylq.transaction">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
     </context:component-scan>
	</context:annotation-config>
	<!-- 扫描controller（controller层注入） -->
	<context:component-scan base-package="com.ylq.transaction.controller" use-default-filters="false">
	    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
  <!--  通过Web.xml的DispatcherServlet加载 -->
  <!-- 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的 -->
  <!-- <mvc:annotation-driven /> --> 
  <mvc:annotation-driven />
  <context:component-scan base-package="com.ylq.transaction.controllers"/>
  
  <mvc:annotation-driven>
     <mvc:message-converters>
	     <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
	     <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
	   </mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- 内容协商管理器  -->
	<!--1、首先检查路径扩展名（如my.pdf）；2、其次检查Parameter（如my.format=pdf）；3、检查Accept Header-->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
		<property name="favorPathExtension" value="true"/>
		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
		<property name="favorParameter" value="true"/>
		<property name="parameterName" value="format"/>
		<!-- 是否忽略Accept Header -->
		<property name="ignoreAcceptHeader" value="false"/>
		
		<property name="mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用  -->
			<value>
			json=application/json
			xml=application/xml
			html=text/html
			</value>
		</property>
		<!-- 默认的content type -->
		<property name="defaultContentType" value="text/html"/>
	</bean>
    
	<!-- 当在web.xml 中   DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
	<mvc:default-servlet-handler />  
	<!-- 静态资源映射 -->
	<mvc:resources mapping="/static/**" location="/WEB-INF/static/"/>
	<!-- 对模型视图添加前后缀 
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
	 p:prefix="/WEB-INF/jsp/" p:suffix=".jsp"/>
	 -->
	
    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json; charset=utf-8</value>
            </list>
        </property>
    </bean>
    
    



    <!-- 2. 组件扫描路径配置，让Spring 容器知道需要扫描哪些包路径下可以加载到容器中的类 -->
    <!--    多个扫描路径配置  base-package="com.app,com.core,JUnit4" 也可以写多份,一般直接写多份 -->
    <context:component-scan base-package="com.ylq.*" />

    <!-- 启动spring事务注解, $该启用必须在springMVC中,而不能在applicationContext.xml中配置,不然事务注解无效$
         也就是说只有这一行才能真正开启事务,单独地在类或方法上注解@Transaction只是作了事务标记而以-->  
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!-- 3. 处理在类级别上的@RequestMapping注解 -->
    
    



    
    <!-- 5.对模型视图名称的解析，即给模型视图名称添加前后缀 -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- Spring内部资源解析类 -->
        <property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView" />
		    <property name="contentType" value="text/html" />
        <property name="prefix" value="/WEB-INF/jsp/" /> <!-- 让ModelAndView("jsp/transaction/list.jsp") 从/WEB-INF/目录下开始 -->
        <property name="suffix" value=".jsp" />
    </bean>
    
    <!-- 6.异常解析器 -->  
  <bean id="simpleMappingExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
    <property name="exceptionMappings">  
      <props>  
        <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">jsp/common/exception</prop>  
      </props>  
    </property>  
  </bean>  
    
</beans>